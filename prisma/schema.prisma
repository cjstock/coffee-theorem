// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String? @db.LongText
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.LongText
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  coffees       Coffee[]
  accounts      Account[]
  sessions      Session[]

  @@index([id])
}

model Coffee {
  id                 String              @id @unique @default(cuid())
  origin             String
  isFavorite         Boolean
  process            String?
  variety            String?
  altitude           Int?
  roast              String?
  coffeeTastingNotes CoffeeTastingNote[]
  recipes            String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  seller Seller? @relation(fields: [sellerId], references: [id])

  roaster Roaster? @relation(fields: [roasterId], references: [id])

  producer Producer? @relation(fields: [producerId], references: [id])

  brewer     Brewer? @relation(fields: [brewerId], references: [id])
  sellerId   String?
  roasterId  String?
  producerId String?
  brewerId   String?

  @@index([userId])
  @@index([sellerId])
  @@index([roasterId])
  @@index([producerId])
  @@index([brewerId])
}

model TastingNote {
  id                 Int                 @id @default(autoincrement())
  note               String
  coffeeTastingNotes CoffeeTastingNote[]
}

model CoffeeTastingNote {
  id            Int         @default(dbgenerated())
  coffee        Coffee      @relation(fields: [coffeeId], references: [id])
  tastingNote   TastingNote @relation(fields: [tastingNoteId], references: [id])
  coffeeId      String
  tastingNoteId Int

  @@id([coffeeId, tastingNoteId])
  @@index([coffeeId])
  @@index([tastingNoteId])
}

model Roaster {
  id      String   @id @default(cuid())
  name    String
  url     String?
  address String?
  info    String?  @db.LongText
  coffees Coffee[]
}

model Producer {
  id      String   @id @default(cuid())
  name    String
  url     String?
  address String?
  info    String?  @db.LongText
  coffees Coffee[]
}

model Seller {
  id        String   @id @default(cuid())
  name      String
  url       String?
  address   String?
  info      String?  @db.LongText
  isRoaster Boolean
  coffees   Coffee[]
}

model Brewer {
  id           String   @id @default(cuid())
  name         String
  url          String?
  address      String?
  info         String?  @db.LongText
  tastingNotes String?
  recipes      String?
  coffees Coffee[]
}

model Variety {
  id                 String  @id @default(cuid())
  name               String
  description        String?
  stature            Int?
  leafTipColor       String?
  beanSize           Int?
  qualPotHighAlt     Int?
  yieldPot           Int?
  coffeeLeafRust     Int?
  coffeeBerryDisease Int?
  nematodes          Int?
  yearOfFirstProd    Int?
  nutReq             Int?
  lineage            String?
  breeder            String?
  history            String? @db.LongText
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "camelCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "./ERD.svg"
//   theme    = "forest"
// }
