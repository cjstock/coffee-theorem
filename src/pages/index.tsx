import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { cursorTo } from "readline";
import { beanRouter } from "../server/router/bean";
import { trpc } from "../utils/trpc";

const AddBean: React.FC = () => {
  const { mutate } = trpc.useMutation("beans.create");

  const emptyForm = {
    country: "",
    region: "",
    process: "",
    variety: "",
    altitude: "",
    roast: ""
  }

  const [bean, setBean] = useState(emptyForm);

  return (
    <div className="z-50 p-4 h-2/3 w-1/2 bg-secondary">
      <form className="form-control" onSubmit={(event) => {
        event.preventDefault()
        mutate(bean)
        setBean(emptyForm)
      }}>
        <label className="label" htmlFor="country-input">Country</label>
        <input className="input input-primary" id="country-input" name="Country" value={bean.country} onChange={event => setBean({ ...bean, country: event.currentTarget.value })} />
        <label className="label" htmlFor="region-input">Region</label>
        <input className="input input-primary" id="region-input" name="Region" value={bean.region} onChange={event => setBean({ ...bean, region: event.currentTarget.value })} />
        <label className="label" htmlFor="region-input">Process</label>
        <input className="input input-primary" id="process-input" name="Process" value={bean.process} onChange={event => setBean({ ...bean, process: event.currentTarget.value })} />
        <label className="label" htmlFor="region-input">Variety</label>
        <input className="input input-primary" id="variety-input" name="Variety" value={bean.variety} onChange={event => setBean({ ...bean, variety: event.currentTarget.value })} />
        <label className="label" htmlFor="region-input">Altitude</label>
        <input className="input input-primary" id="altitude-input" name="Altitude" value={bean.altitude} onChange={event => setBean({ ...bean, altitude: event.currentTarget.value })} />
        <label className="label" htmlFor="region-input">Roast</label>
        <input className="input input-primary" id="roast-input" name="Roast" value={bean.roast} onChange={event => setBean({ ...bean, roast: event.currentTarget.value })} />
        <button className="btn btn-secondary" formAction="submit">Submit</button>
      </form>
    </div>
  )
}


const Home: NextPage = () => {
  const hello = trpc.useQuery(["example.hello", { text: "from tRPC" }]);
  const { data, isLoading } = trpc.useQuery(["beans.getAll"])

  if (isLoading || !data) return <div>Loading...</div>

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="w-screen min-h-screen flex flex-col justify-center items-center p-4 overflow-y-scroll">
        <AddBean />
      </div>
    </>
  )
};


export default Home;
